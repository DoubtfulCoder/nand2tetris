class Main {
	function void main() {
		// 16 pieces fit on one column...they should be scaled by 2
		do Main.draw_king(200);
		do Main.xxx(203);
		//do Main.draw_king(Math.multiply(512, 0));
		//do Main.draw_king(Math.multiply(512, 1));
		//do Main.draw_king(Math.multiply(512, 2));
		//do Main.draw_king(Math.multiply(512, 3));
		//do Main.draw_king(Math.multiply(512, 4));
		//do Main.draw_king(Math.multiply(512, 5));
		//do Main.draw_king(Math.multiply(512, 6));
		//do Main.draw_king(Math.multiply(512, 7));
		//do Main.draw_king(Math.multiply(512, 8));
		//do Main.draw_king(Math.multiply(512, 9));
		//do Main.draw_king(Math.multiply(512, 10));
		//do Main.draw_king(Math.multiply(512, 11));
		//do Main.draw_king(Math.multiply(512, 12));
		//do Main.draw_king(Math.multiply(512, 13));
		//do Main.draw_king(Math.multiply(512, 14));
		//do Main.draw_king(Math.multiply(512, 15));

		do Main.draw_pawn_2(Math.multiply(1024, 0));
		do Main.draw_pawn_2(Math.multiply(1024, 1));
		do Main.draw_pawn_2(Math.multiply(1024, 2));
		do Main.draw_pawn_2(Math.multiply(1024, 3));
		do Main.draw_pawn_2(Math.multiply(1024, 4));
		do Main.draw_pawn_2(Math.multiply(1024, 5));
		//do Main.draw_pawn_2(Math.multiply(1024, 6));
		//do Main.draw_pawn_2(Math.multiply(1024, 7));
		do Main.draw_pawn_4(Math.multiply(1024, 6));
		do Main.draw_pawn_3(Math.multiply(1024, 7));

		// do Main.draw_bp_ws(200);
		// do Main.draw_wp_ws(3);
		// do Main.draw_wp_ws(200);


		/** TWO OVER MOVES TO NEXT SQUARE FOR BLACK SQUARES */
		do Main.draw_pawn_2(Math.multiply(1024, 0) + 2);
		do Main.draw_pawn_2(Math.multiply(1024, 1) + 2);
		do Main.draw_pawn_2(Math.multiply(1024, 2) + 2);
		do Main.draw_pawn_2(Math.multiply(1024, 3) + 2);
		do Main.draw_pawn_2(Math.multiply(1024, 4) + 2);
		do Main.draw_pawn_2(Math.multiply(1024, 5) + 2);
		do Main.draw_pawn_4(Math.multiply(1024, 6) + 2);
		do Main.draw_pawn_3(Math.multiply(1024, 7) + 2);

		do Main.draw_wp_ws(Math.multiply(1024, 0) + 4.5);
		do Main.draw_pawn_2(Math.multiply(1024, 1) + 4);
		do Main.draw_wp_ws(Math.multiply(1024, 2) + 4);
		do Main.draw_pawn_2(Math.multiply(1024, 3) + 4);
		do Main.draw_test(Math.multiply(1024, 4) + 4);
		do Main.draw_bp_ws(Math.multiply(1024, 5) + 4);
		do Main.draw_wp_ws(Math.multiply(1024, 6) + 4);
		do Main.draw_bp_ws(Math.multiply(1024, 7) + 4);

		do Main.draw_wp_bs(Math.multiply(1024, 0) + 6);
		do Main.draw_wp_bs(Math.multiply(1024, 1) + 6);
		do Main.draw_wp_bs(Math.multiply(1024, 2) + 6);
		do Main.draw_wp_bs(Math.multiply(1024, 3) + 6);
		do Main.draw_wp_bs(Math.multiply(1024, 4) + 6);
		do Main.draw_wp_bs(Math.multiply(1024, 5) + 6);
		do Main.draw_wp_bs(Math.multiply(1024, 6) + 6);
		do Main.draw_wp_bs(Math.multiply(1024, 7) + 6);

		do Main.draw_bk_ws(Math.multiply(1024, 0) + 8);
		do Main.draw_bk_ws(Math.multiply(1024, 1) + 8);
		do Main.draw_bk_ws(Math.multiply(1024, 2) + 8);
		do Main.draw_wk_bs(Math.multiply(1024, 3) + 8);
		do Main.draw_wk_bs(Math.multiply(1024, 4) + 8);
		do Main.draw_wk_bs(Math.multiply(1024, 5) + 8);
		do Main.draw_wk_bs(Math.multiply(1024, 6) + 8);
		do Main.draw_wk_bs(Math.multiply(1024, 7) + 8);

		do Main.draw_test(Math.multiply(1024, 0) + 10);
		do Main.draw_test(Math.multiply(1024, 1) + 10);
		do Main.draw_test(Math.multiply(1024, 2) + 10);
		do Main.draw_test(Math.multiply(1024, 3) + 10);


		// do Main.draw_queen(200);
		// do Main.draw_bishop(300);
		// do Main.draw_knight(400);
		// do Main.draw_pawn_2(500);
		// do Main.draw_rook(600);
		return;
	}

	function void draw_test(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, ~32767);
		do Memory.poke(memAddress +32, ~32767);
		do Memory.poke(memAddress +64, -32576);
		do Memory.poke(memAddress +96, -25280);
		do Memory.poke(memAddress +128, -27072);
		do Memory.poke(memAddress +160, -2880);
		do Memory.poke(memAddress +192, -15232);
		do Memory.poke(memAddress +224, -13952);
		do Memory.poke(memAddress +256, -14079);
		do Memory.poke(memAddress +288, -11776);
		do Memory.poke(memAddress +320, -512);
		do Memory.poke(memAddress +352, -1024);
		do Memory.poke(memAddress +384, -1024);
		do Memory.poke(memAddress +416, -512);
		do Memory.poke(memAddress +448, -512);
		do Memory.poke(memAddress +480, -512);
		do Memory.poke(memAddress +512, -512);
		do Memory.poke(memAddress +544, -128);
		do Memory.poke(memAddress +576, -128);
		do Memory.poke(memAddress +608, -128);
		do Memory.poke(memAddress +640, -128);
		do Memory.poke(memAddress +672, -128);
		do Memory.poke(memAddress +704, -128);
		// column 1
		do Memory.poke(memAddress +65, 384);
		do Memory.poke(memAddress +97, 348);
		do Memory.poke(memAddress +129, 308);
		do Memory.poke(memAddress +161, 407);
		do Memory.poke(memAddress +193, 401);
		do Memory.poke(memAddress +225, 201);
		do Memory.poke(memAddress +257, 73);
		do Memory.poke(memAddress +289, 37);
		do Memory.poke(memAddress +321, 63);
		do Memory.poke(memAddress +353, 31);
		do Memory.poke(memAddress +385, 31);
		do Memory.poke(memAddress +417, 63);
		do Memory.poke(memAddress +449, 63);
		do Memory.poke(memAddress +481, 63);
		do Memory.poke(memAddress +513, 63);
		do Memory.poke(memAddress +545, 255);
		do Memory.poke(memAddress +577, 255);
		do Memory.poke(memAddress +609, 255);
		do Memory.poke(memAddress +641, 255);
		do Memory.poke(memAddress +673, 255);
		do Memory.poke(memAddress +705, 255);
		return;
	}

	function void xxx(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 256);
		do Memory.poke(memAddress+64, 256);
		do Memory.poke(memAddress+96, -8842);
		do Memory.poke(memAddress+128, -18470);
		do Memory.poke(memAddress+160, -27758);
		do Memory.poke(memAddress+192, -9930);
		do Memory.poke(memAddress+224, 28012);
		do Memory.poke(memAddress+256, 16376);
		do Memory.poke(memAddress+288, 8176);
		do Memory.poke(memAddress+320, 16376);
		do Memory.poke(memAddress+352, 16376);
		do Memory.poke(memAddress+384, 16376);
		do Memory.poke(memAddress+416, 16376);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}

	function void draw_bp_ws(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, 896);
		do Memory.poke(memAddress +32, 1984);
		do Memory.poke(memAddress +64, 1984);
		do Memory.poke(memAddress +96, 896);
		do Memory.poke(memAddress +128, 1984);
		do Memory.poke(memAddress +160, 1984);
		do Memory.poke(memAddress +192, 3168);
		do Memory.poke(memAddress +224, 8176);
		do Memory.poke(memAddress +256, 1984);
		do Memory.poke(memAddress +288, 1984);
		do Memory.poke(memAddress +320, 1984);
		do Memory.poke(memAddress +352, 1984);
		do Memory.poke(memAddress +384, 4064);
		do Memory.poke(memAddress +416, 4064);
		do Memory.poke(memAddress +448, 4064);
		do Memory.poke(memAddress +480, 7280);
		do Memory.poke(memAddress +512, 16376);
		do Memory.poke(memAddress +544, 16376);
		do Memory.poke(memAddress +576, 28700);
		do Memory.poke(memAddress +608, 32764);
		do Memory.poke(memAddress +640, -2);
		do Memory.poke(memAddress +672, -2);
		do Memory.poke(memAddress +704, -2);
		do Memory.poke(memAddress +736, -32766);
		do Memory.poke(memAddress +768, -1);
		// column 1
		do Memory.poke(memAddress +769, 1);
		return;
	}

	function void draw_wp_bs(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, 16383);
		do Memory.poke(memAddress +128, 8191);
		do Memory.poke(memAddress +160, 8191);
		do Memory.poke(memAddress +192, 16383);
		do Memory.poke(memAddress +224, 8191);
		do Memory.poke(memAddress +256, 8191);
		do Memory.poke(memAddress +288, -12289);
		do Memory.poke(memAddress +320, 2047);
		do Memory.poke(memAddress +352, 8191);
		do Memory.poke(memAddress +384, 8191);
		do Memory.poke(memAddress +416, 8191);
		do Memory.poke(memAddress +448, 8191);
		do Memory.poke(memAddress +480, 4095);
		do Memory.poke(memAddress +512, 4095);
		do Memory.poke(memAddress +544, 4095);
		do Memory.poke(memAddress +576, -14337);
		do Memory.poke(memAddress +608, 1023);
		do Memory.poke(memAddress +640, 1023);
		do Memory.poke(memAddress +672, -3585);
		do Memory.poke(memAddress +704, 511);
		do Memory.poke(memAddress +736, 255);
		do Memory.poke(memAddress +768, 255);
		do Memory.poke(memAddress +800, 255);
		do Memory.poke(memAddress +832, -257);
		do Memory.poke(memAddress +864, 127);
		do Memory.poke(memAddress +896, -1);
		do Memory.poke(memAddress +928, -1);
		do Memory.poke(memAddress +960, -1);
		do Memory.poke(memAddress +992, -1);
		// column 1
		do Memory.poke(memAddress +1, -1);
		do Memory.poke(memAddress +33, -1);
		do Memory.poke(memAddress +65, -1);
		do Memory.poke(memAddress +97, -2);
		do Memory.poke(memAddress +129, -4);
		do Memory.poke(memAddress +161, -4);
		do Memory.poke(memAddress +193, -2);
		do Memory.poke(memAddress +225, -4);
		do Memory.poke(memAddress +257, -4);
		do Memory.poke(memAddress +289, -7);
		do Memory.poke(memAddress +321, -16);
		do Memory.poke(memAddress +353, -4);
		do Memory.poke(memAddress +385, -4);
		do Memory.poke(memAddress +417, -4);
		do Memory.poke(memAddress +449, -4);
		do Memory.poke(memAddress +481, -8);
		do Memory.poke(memAddress +513, -8);
		do Memory.poke(memAddress +545, -8);
		do Memory.poke(memAddress +577, -15);
		do Memory.poke(memAddress +609, -32);
		do Memory.poke(memAddress +641, -32);
		do Memory.poke(memAddress +673, -49);
		do Memory.poke(memAddress +705, -64);
		do Memory.poke(memAddress +737, -128);
		do Memory.poke(memAddress +769, -128);
		do Memory.poke(memAddress +801, -128);
		do Memory.poke(memAddress +833, -65);
		do Memory.poke(memAddress +865, -256);
		do Memory.poke(memAddress +897, -1);
		do Memory.poke(memAddress +929, -1);
		do Memory.poke(memAddress +961, -1);
		do Memory.poke(memAddress +993, -1);
		return;
	}

	function void draw_bk_ws(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, 512);
		do Memory.poke(memAddress +32, 512);
		do Memory.poke(memAddress +64, 515);
		do Memory.poke(memAddress +96, 29301);
		do Memory.poke(memAddress +128, -11687);
		do Memory.poke(memAddress +160, 24531);
		do Memory.poke(memAddress +192, 18194);
		do Memory.poke(memAddress +224, 10022);
		do Memory.poke(memAddress +256, 10020);
		do Memory.poke(memAddress +288, -26808);
		do Memory.poke(memAddress +320, -8);
		do Memory.poke(memAddress +352, 32752);
		do Memory.poke(memAddress +384, 32752);
		do Memory.poke(memAddress +416, -8);
		do Memory.poke(memAddress +448, -8);
		do Memory.poke(memAddress +480, -8);
		do Memory.poke(memAddress +512, -8);
		do Memory.poke(memAddress +544, -2);
		do Memory.poke(memAddress +576, -2);
		do Memory.poke(memAddress +608, -2);
		do Memory.poke(memAddress +640, -2);
		do Memory.poke(memAddress +672, -2);
		do Memory.poke(memAddress +704, -2);
		// column 1
		do Memory.poke(memAddress +65, 6);
		do Memory.poke(memAddress +97, 5);
		do Memory.poke(memAddress +129, 4);
		do Memory.poke(memAddress +161, 6);
		do Memory.poke(memAddress +193, 6);
		do Memory.poke(memAddress +225, 3);
		do Memory.poke(memAddress +257, 1);
		do Memory.poke(memAddress +545, 3);
		do Memory.poke(memAddress +577, 3);
		do Memory.poke(memAddress +609, 3);
		do Memory.poke(memAddress +641, 3);
		do Memory.poke(memAddress +673, 3);
		do Memory.poke(memAddress +705, 3);
		return;
	}

	function void draw_wk_bs(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, -1);
		do Memory.poke(memAddress +128, -1);
		do Memory.poke(memAddress +160, -1);
		do Memory.poke(memAddress +192, 32767);
		do Memory.poke(memAddress +224, 32767);
		do Memory.poke(memAddress +256, 32575);
		do Memory.poke(memAddress +288, 25279);
		do Memory.poke(memAddress +320, 27071);
		do Memory.poke(memAddress +352, 2879);
		do Memory.poke(memAddress +384, 15231);
		do Memory.poke(memAddress +416, 13951);
		do Memory.poke(memAddress +448, 14079);
		do Memory.poke(memAddress +480, 11775);
		do Memory.poke(memAddress +512, 511);
		do Memory.poke(memAddress +544, 1023);
		do Memory.poke(memAddress +576, 1023);
		do Memory.poke(memAddress +608, 511);
		do Memory.poke(memAddress +640, 511);
		do Memory.poke(memAddress +672, 511);
		do Memory.poke(memAddress +704, 511);
		do Memory.poke(memAddress +736, 127);
		do Memory.poke(memAddress +768, 127);
		do Memory.poke(memAddress +800, 127);
		do Memory.poke(memAddress +832, 127);
		do Memory.poke(memAddress +864, 127);
		do Memory.poke(memAddress +896, 127);
		do Memory.poke(memAddress +928, -1);
		do Memory.poke(memAddress +960, -1);
		do Memory.poke(memAddress +992, -1);
		// column 1
		do Memory.poke(memAddress +1, -1);
		do Memory.poke(memAddress +33, -1);
		do Memory.poke(memAddress +65, -1);
		do Memory.poke(memAddress +97, -1);
		do Memory.poke(memAddress +129, -1);
		do Memory.poke(memAddress +161, -1);
		do Memory.poke(memAddress +193, -1);
		do Memory.poke(memAddress +225, -1);
		do Memory.poke(memAddress +257, -385);
		do Memory.poke(memAddress +289, -349);
		do Memory.poke(memAddress +321, -309);
		do Memory.poke(memAddress +353, -408);
		do Memory.poke(memAddress +385, -402);
		do Memory.poke(memAddress +417, -202);
		do Memory.poke(memAddress +449, -74);
		do Memory.poke(memAddress +481, -38);
		do Memory.poke(memAddress +513, -64);
		do Memory.poke(memAddress +545, -32);
		do Memory.poke(memAddress +577, -32);
		do Memory.poke(memAddress +609, -64);
		do Memory.poke(memAddress +641, -64);
		do Memory.poke(memAddress +673, -64);
		do Memory.poke(memAddress +705, -64);
		do Memory.poke(memAddress +737, -256);
		do Memory.poke(memAddress +769, -256);
		do Memory.poke(memAddress +801, -256);
		do Memory.poke(memAddress +833, -256);
		do Memory.poke(memAddress +865, -256);
		do Memory.poke(memAddress +897, -256);
		do Memory.poke(memAddress +929, -1);
		do Memory.poke(memAddress +961, -1);
		do Memory.poke(memAddress +993, -1);
		return;
	}

	function void draw_pawn_2(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, 16383);
		do Memory.poke(memAddress +128, 8191);
		do Memory.poke(memAddress +160, 8191);
		do Memory.poke(memAddress +192, 16383);
		do Memory.poke(memAddress +224, 8191);
		do Memory.poke(memAddress +256, -8193);
		do Memory.poke(memAddress +288, -12289);
		do Memory.poke(memAddress +320, 2047);
		do Memory.poke(memAddress +352, -8193);
		do Memory.poke(memAddress +384, -8193);
		do Memory.poke(memAddress +416, -8193);
		do Memory.poke(memAddress +448, -8193);
		do Memory.poke(memAddress +480, -12289);
		do Memory.poke(memAddress +512, -4097);
		do Memory.poke(memAddress +544, -4097);
		do Memory.poke(memAddress +576, -6145);
		do Memory.poke(memAddress +608, -2049);
		do Memory.poke(memAddress +640, -3073);
		do Memory.poke(memAddress +672, -1025);
		do Memory.poke(memAddress +704, -1537);
		do Memory.poke(memAddress +736, -513);
		do Memory.poke(memAddress +768, -769);
		do Memory.poke(memAddress +800, -257);
		do Memory.poke(memAddress +832, 255);
		do Memory.poke(memAddress +864, -257);
		do Memory.poke(memAddress +896, 127);
		do Memory.poke(memAddress +928, -1);
		do Memory.poke(memAddress +960, -1);
		do Memory.poke(memAddress +992, -1);
		// column 1
		do Memory.poke(memAddress +1, -1);
		do Memory.poke(memAddress +33, -1);
		do Memory.poke(memAddress +65, -1);
		do Memory.poke(memAddress +97, -2);
		do Memory.poke(memAddress +129, -4);
		do Memory.poke(memAddress +161, -4);
		do Memory.poke(memAddress +193, -2);
		do Memory.poke(memAddress +225, -4);
		do Memory.poke(memAddress +257, -3);
		do Memory.poke(memAddress +289, -7);
		do Memory.poke(memAddress +321, -16);
		do Memory.poke(memAddress +353, -3);
		do Memory.poke(memAddress +385, -3);
		do Memory.poke(memAddress +417, -3);
		do Memory.poke(memAddress +449, -3);
		do Memory.poke(memAddress +481, -7);
		do Memory.poke(memAddress +513, -5);
		do Memory.poke(memAddress +545, -5);
		do Memory.poke(memAddress +577, -13);
		do Memory.poke(memAddress +609, -9);
		do Memory.poke(memAddress +641, -25);
		do Memory.poke(memAddress +673, -17);
		do Memory.poke(memAddress +705, -49);
		do Memory.poke(memAddress +737, -33);
		do Memory.poke(memAddress +769, -97);
		do Memory.poke(memAddress +801, -65);
		do Memory.poke(memAddress +833, -128);
		do Memory.poke(memAddress +865, -65);
		do Memory.poke(memAddress +897, -256);
		do Memory.poke(memAddress +929, -1);
		do Memory.poke(memAddress +961, -1);
		do Memory.poke(memAddress +993, -1);
		return;
	}

	function void draw_pawn_3(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, 16383);
		do Memory.poke(memAddress +128, 8191);
		do Memory.poke(memAddress +160, 8191);
		do Memory.poke(memAddress +192, 16383);
		do Memory.poke(memAddress +224, 8191);
		do Memory.poke(memAddress +256, -8193);
		do Memory.poke(memAddress +288, -12289);
		do Memory.poke(memAddress +320, 2047);
		do Memory.poke(memAddress +352, -8193);
		do Memory.poke(memAddress +384, -8193);
		do Memory.poke(memAddress +416, -8193);
		do Memory.poke(memAddress +448, -8193);
		do Memory.poke(memAddress +480, -12289);
		do Memory.poke(memAddress +512, -4097);
		do Memory.poke(memAddress +544, -4097);
		do Memory.poke(memAddress +576, 10239);
		do Memory.poke(memAddress +608, -2049);
		do Memory.poke(memAddress +640, -3073);
		do Memory.poke(memAddress +672, -1025);
		do Memory.poke(memAddress +704, 2559);
		do Memory.poke(memAddress +736, -513);
		do Memory.poke(memAddress +768, -769);
		do Memory.poke(memAddress +800, -257);
		do Memory.poke(memAddress +832, 255);
		do Memory.poke(memAddress +864, -257);
		do Memory.poke(memAddress +896, 127);
		do Memory.poke(memAddress +928, -1);
		do Memory.poke(memAddress +960, -1);
		do Memory.poke(memAddress +992, -1);
		// column 1
		do Memory.poke(memAddress +1, -1);
		do Memory.poke(memAddress +33, -1);
		do Memory.poke(memAddress +65, -1);
		do Memory.poke(memAddress +97, -2);
		do Memory.poke(memAddress +129, -4);
		do Memory.poke(memAddress +161, -4);
		do Memory.poke(memAddress +193, -2);
		do Memory.poke(memAddress +225, -4);
		do Memory.poke(memAddress +257, -3);
		do Memory.poke(memAddress +289, -7);
		do Memory.poke(memAddress +321, -16);
		do Memory.poke(memAddress +353, -3);
		do Memory.poke(memAddress +385, -3);
		do Memory.poke(memAddress +417, -3);
		do Memory.poke(memAddress +449, -3);
		do Memory.poke(memAddress +481, -7);
		do Memory.poke(memAddress +513, -5);
		do Memory.poke(memAddress +545, -5);
		do Memory.poke(memAddress +577, -14);
		do Memory.poke(memAddress +609, -9);
		do Memory.poke(memAddress +641, -25);
		do Memory.poke(memAddress +673, -17);
		do Memory.poke(memAddress +705, -56);
		do Memory.poke(memAddress +737, -33);
		do Memory.poke(memAddress +769, -97);
		do Memory.poke(memAddress +801, -65);
		do Memory.poke(memAddress +833, -128);
		do Memory.poke(memAddress +865, -65);
		do Memory.poke(memAddress +897, -256);
		do Memory.poke(memAddress +929, -1);
		do Memory.poke(memAddress +961, -1);
		do Memory.poke(memAddress +993, -1);
		return;
	}

	function void draw_pawn_4(int location) {
		// Best black pawn on black square
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, 16383);
		do Memory.poke(memAddress +128, -8193);
		do Memory.poke(memAddress +160, -8193);
		do Memory.poke(memAddress +192, 16383);
		do Memory.poke(memAddress +224, 8191);
		do Memory.poke(memAddress +256, -8193);
		do Memory.poke(memAddress +288, -12289);
		do Memory.poke(memAddress +320, 2047);
		do Memory.poke(memAddress +352, -8193);
		do Memory.poke(memAddress +384, -8193);
		do Memory.poke(memAddress +416, -8193);
		do Memory.poke(memAddress +448, -8193);
		do Memory.poke(memAddress +480, -12289);
		do Memory.poke(memAddress +512, -4097);
		do Memory.poke(memAddress +544, -4097);
		do Memory.poke(memAddress +576, 10239);
		do Memory.poke(memAddress +608, -3073);
		do Memory.poke(memAddress +640, -1025);
		do Memory.poke(memAddress +672, 2559);
		do Memory.poke(memAddress +704, -513);
		do Memory.poke(memAddress +736, -769);
		do Memory.poke(memAddress +768, -257);
		do Memory.poke(memAddress +800, 255);
		do Memory.poke(memAddress +832, -257);
		do Memory.poke(memAddress +864, 127);
		do Memory.poke(memAddress +896, -1);
		do Memory.poke(memAddress +928, -1);
		do Memory.poke(memAddress +960, -1);
		do Memory.poke(memAddress +992, -1);
		// column 1
		do Memory.poke(memAddress +1, -1);
		do Memory.poke(memAddress +33, -1);
		do Memory.poke(memAddress +65, -1);
		do Memory.poke(memAddress +97, -2);
		do Memory.poke(memAddress +129, -3);
		do Memory.poke(memAddress +161, -3);
		do Memory.poke(memAddress +193, -2);
		do Memory.poke(memAddress +225, -4);
		do Memory.poke(memAddress +257, -3);
		do Memory.poke(memAddress +289, -7);
		do Memory.poke(memAddress +321, -16);
		do Memory.poke(memAddress +353, -3);
		do Memory.poke(memAddress +385, -3);
		do Memory.poke(memAddress +417, -3);
		do Memory.poke(memAddress +449, -3);
		do Memory.poke(memAddress +481, -7);
		do Memory.poke(memAddress +513, -5);
		do Memory.poke(memAddress +545, -5);
		do Memory.poke(memAddress +577, -14);
		do Memory.poke(memAddress +609, -25);
		do Memory.poke(memAddress +641, -17);
		do Memory.poke(memAddress +673, -56);
		do Memory.poke(memAddress +705, -33);
		do Memory.poke(memAddress +737, -97);
		do Memory.poke(memAddress +769, -65);
		do Memory.poke(memAddress +801, -128);
		do Memory.poke(memAddress +833, -65);
		do Memory.poke(memAddress +865, -256);
		do Memory.poke(memAddress +897, -1);
		do Memory.poke(memAddress +929, -1);
		do Memory.poke(memAddress +961, -1);
		do Memory.poke(memAddress +993, -1);
		return;
	}

	// function void draw_wp_ws(int location) {
	// 	var int memAddress; 
	// 	let memAddress = 16384+location;
	// 	// column 0
	// 	do Memory.poke(memAddress, 896);
	// 	do Memory.poke(memAddress +32, 1088);
	// 	do Memory.poke(memAddress +64, 1088);
	// 	do Memory.poke(memAddress +96, 896);
	// 	do Memory.poke(memAddress +128, 1984);
	// 	do Memory.poke(memAddress +160, 1088);
	// 	do Memory.poke(memAddress +192, 3168);
	// 	do Memory.poke(memAddress +224, 8176);
	// 	do Memory.poke(memAddress +256, 1088);
	// 	do Memory.poke(memAddress +288, 1088);
	// 	do Memory.poke(memAddress +320, 1088);
	// 	do Memory.poke(memAddress +352, 1088);
	// 	do Memory.poke(memAddress +384, 3168);
	// 	do Memory.poke(memAddress +416, 2080);
	// 	do Memory.poke(memAddress +448, 2080);
	// 	do Memory.poke(memAddress +480, 2080);
	// 	do Memory.poke(memAddress +512, 7088);
	// 	do Memory.poke(memAddress +544, 4112);
	// 	do Memory.poke(memAddress +576, 12312);
	// 	do Memory.poke(memAddress +608, 8200);
	// 	do Memory.poke(memAddress +640, 28652);
	// 	do Memory.poke(memAddress +672, 24580);
	// 	do Memory.poke(memAddress +704, -16378);
	// 	do Memory.poke(memAddress +736, -32766);
	// 	do Memory.poke(memAddress +768, -2);
	// 	do Memory.poke(memAddress +800, -32766);
	// 	do Memory.poke(memAddress +832, -1);
	// 	// column 1
	// 	do Memory.poke(memAddress +833, 1);
	// 	return;
	// }

	function void draw_wp_ws (int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, 896);
		do Memory.poke(memAddress +32, 1088);
		do Memory.poke(memAddress +64, 1088);
		do Memory.poke(memAddress +96, 896);
		do Memory.poke(memAddress +128, 1984);
		do Memory.poke(memAddress +160, 1088);
		do Memory.poke(memAddress +192, 3168);
		do Memory.poke(memAddress +224, 8176);
		do Memory.poke(memAddress +256, 1088);
		do Memory.poke(memAddress +288, 1088);
		do Memory.poke(memAddress +320, 1088);
		do Memory.poke(memAddress +352, 1088);
		do Memory.poke(memAddress +384, 3168);
		do Memory.poke(memAddress +416, 2080);
		do Memory.poke(memAddress +448, 2080);
		do Memory.poke(memAddress +480, 7088);
		do Memory.poke(memAddress +512, 12312);
		do Memory.poke(memAddress +544, 8200);
		do Memory.poke(memAddress +576, 28652);
		do Memory.poke(memAddress +608, 16388);
		do Memory.poke(memAddress +640, -16378);
		do Memory.poke(memAddress +672, -32766);
		do Memory.poke(memAddress +704, -2);
		do Memory.poke(memAddress +736, -32766);
		do Memory.poke(memAddress +768, -1);
		// column 1
		do Memory.poke(memAddress +769, 1);
		return;
	}

	// function void draw_bp_ws(int location) {
	// 	var int memAddress; 
	// 	let memAddress = 16384+location;
	// 	// column 0
	// 	do Memory.poke(memAddress, 896);
	// 	do Memory.poke(memAddress +32, 1984);
	// 	do Memory.poke(memAddress +64, 1984);
	// 	do Memory.poke(memAddress +96, 896);
	// 	do Memory.poke(memAddress +128, 1984);
	// 	do Memory.poke(memAddress +160, 1088);
	// 	do Memory.poke(memAddress +192, 3168);
	// 	do Memory.poke(memAddress +224, 8176);
	// 	do Memory.poke(memAddress +256, 1088);
	// 	do Memory.poke(memAddress +288, 1088);
	// 	do Memory.poke(memAddress +320, 1088);
	// 	do Memory.poke(memAddress +352, 1088);
	// 	do Memory.poke(memAddress +384, 3168);
	// 	do Memory.poke(memAddress +416, 2080);
	// 	do Memory.poke(memAddress +448, 2080);
	// 	do Memory.poke(memAddress +480, 2080);
	// 	do Memory.poke(memAddress +512, 7088);
	// 	do Memory.poke(memAddress +544, 4112);
	// 	do Memory.poke(memAddress +576, 12312);
	// 	do Memory.poke(memAddress +608, 8200);
	// 	do Memory.poke(memAddress +640, 28652);
	// 	do Memory.poke(memAddress +672, 30724);
	// 	do Memory.poke(memAddress +704, -58);
	// 	do Memory.poke(memAddress +736, -2);
	// 	do Memory.poke(memAddress +768, -2);
	// 	do Memory.poke(memAddress +800, -2);
	// 	do Memory.poke(memAddress +832, -1);
	// 	// column 1
	// 	do Memory.poke(memAddress +833, 1);
	// 	return;
	// }

	function void draw_king(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 128);
		do Memory.poke(memAddress+64, 128);
		do Memory.poke(memAddress+96, 28347);
		do Memory.poke(memAddress+128, 23533);
		do Memory.poke(memAddress+160, 18889);
		do Memory.poke(memAddress+192, 27803);
		do Memory.poke(memAddress+224, 14006);
		do Memory.poke(memAddress+256, 8188);
		do Memory.poke(memAddress+288, 4080);
		do Memory.poke(memAddress+320, 8184);
		do Memory.poke(memAddress+352, 8184);
		do Memory.poke(memAddress+384, 8184);
		do Memory.poke(memAddress+416, 8184);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}

	function void draw_queen(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 8194);
		do Memory.poke(memAddress+64, 9362);
		do Memory.poke(memAddress+96, 9682);
		do Memory.poke(memAddress+128, 14326);
		do Memory.poke(memAddress+160, 7148);
		do Memory.poke(memAddress+192, 4088);
		do Memory.poke(memAddress+224, 992);
		do Memory.poke(memAddress+256, 448);
		do Memory.poke(memAddress+288, 448);
		do Memory.poke(memAddress+320, 448);
		do Memory.poke(memAddress+352, 448);
		do Memory.poke(memAddress+384, 992);
		do Memory.poke(memAddress+416, 992);
		do Memory.poke(memAddress+448, 992);
		do Memory.poke(memAddress+480, 0);
		return;
	}

	function void draw_rook(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 2448);
		do Memory.poke(memAddress+128, 2448);
		do Memory.poke(memAddress+160, 4080);
		do Memory.poke(memAddress+192, 4080);
		do Memory.poke(memAddress+224, 2016);
		do Memory.poke(memAddress+256, 2016);
		do Memory.poke(memAddress+288, 2016);
		do Memory.poke(memAddress+320, 8184);
		do Memory.poke(memAddress+352, 8184);
		do Memory.poke(memAddress+384, 8184);
		do Memory.poke(memAddress+416, 8184);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}

	function void draw_knight(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 896);
		do Memory.poke(memAddress+64, 1984);
		do Memory.poke(memAddress+96, 4064);
		do Memory.poke(memAddress+128, 3696);
		do Memory.poke(memAddress+160, 4088);
		do Memory.poke(memAddress+192, 4092);
		do Memory.poke(memAddress+224, 8088);
		do Memory.poke(memAddress+256, 8128);
		do Memory.poke(memAddress+288, 8160);
		do Memory.poke(memAddress+320, 4080);
		do Memory.poke(memAddress+352, 2032);
		do Memory.poke(memAddress+384, 16380);
		do Memory.poke(memAddress+416, 16380);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}

	function void draw_bishop(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 256);
		do Memory.poke(memAddress+128, 896);
		do Memory.poke(memAddress+160, 960);
		do Memory.poke(memAddress+192, 1504);
		do Memory.poke(memAddress+224, 3312);
		do Memory.poke(memAddress+256, 3696);
		do Memory.poke(memAddress+288, 2016);
		do Memory.poke(memAddress+320, 2016);
		do Memory.poke(memAddress+352, 8184);
		do Memory.poke(memAddress+384, 16380);
		do Memory.poke(memAddress+416, 32766);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}

	function void draw_pawn(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 384);
		do Memory.poke(memAddress+160, 960);
		do Memory.poke(memAddress+192, 2016);
		do Memory.poke(memAddress+224, 4080);
		do Memory.poke(memAddress+256, 4080);
		do Memory.poke(memAddress+288, 2016);
		do Memory.poke(memAddress+320, 2016);
		do Memory.poke(memAddress+352, 8184);
		do Memory.poke(memAddress+384, 16380);
		do Memory.poke(memAddress+416, 16380);
		do Memory.poke(memAddress+448, 16380);
		do Memory.poke(memAddress+480, 0);
		return;
	}
}