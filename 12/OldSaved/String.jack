// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int trueLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let str = Array.new(maxLength);
        let trueLen = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return trueLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[trueLen] = c;
        let trueLen = trueLen + 1;
        return str;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[trueLen - 1] = 0;
        let trueLen = trueLen - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int i;
        var int d;
        
        while ((i < (trueLen + 1)) & (str[i] < 58)) {
            let d = str[i] - 48; // converts from ascii to decimal
            let val = val * 10 + d; // moves to next digit and adds digit  
            let i = i + 1;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var char c;
        var String newStr;

        let lastDigit = val - (10 * (val / 10)); // equivalent of val % 10 (gets last digit)
        let c = lastDigit + 48; // converts from decimal to ASCII

        if (val < 10) {
            // For one digit, it simply returns the char
            let newStr = String.new(80);
            do newStr.append(c);
        } else {
            // For more digits, it append the char to the rest
            do setInt(val / 10).append(c);
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
